// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InstrumentMessagesHandlerTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QCRulesManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QCRulesManagement.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "QCRulesManagement", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "QCRulesManagement")))
            {
                InstrumentMessagesHandlerTests.QCRulesManagementFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add new Standard Deviation Rule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void AddNewStandardDeviationRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new Standard Deviation Rule", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table1.AddRow(new string[] {
                        "\"Rule1446\"",
                        "True",
                        "\"An Standard deviation rule\"",
                        "2",
                        "2"});
#line 5
 testRunner.When("user creates an standard deviation rule with the values", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table2.AddRow(new string[] {
                        "\"Rule1446\"",
                        "True",
                        "\"An Standard deviation rule\"",
                        "2",
                        "2"});
#line 8
 testRunner.Then("the rule is saved on the system with the values", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit existing Standard Deviation Rule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void EditExistingStandardDeviationRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit existing Standard Deviation Rule", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table3.AddRow(new string[] {
                        "\"Rule1612\"",
                        "False",
                        "\"An Standard deviation rule 1612\"",
                        "2",
                        "6"});
#line 14
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table4.AddRow(new string[] {
                        "\"Rule1612\"",
                        "\"An Standard deviation rule 1615\"",
                        "5",
                        "2"});
#line 17
 testRunner.When("user modifies the values", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table5.AddRow(new string[] {
                        "\"Rule1612\"",
                        "False",
                        "\"An Standard deviation rule 1615\"",
                        "5",
                        "2"});
#line 20
 testRunner.Then("the rule is saved on the system with the values", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deactivate an existing rule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void DeactivateAnExistingRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate an existing rule", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table6.AddRow(new string[] {
                        "Rule2215",
                        "True",
                        "An Standard deviation rule 2215",
                        "2",
                        "9"});
#line 26
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table6, "And ");
#line 29
 testRunner.When("user deactivates the rule \"Rule2215\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the rule \"Rule2215\" is deactivated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Reactivate a deactivated rule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void ReactivateADeactivatedRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reactivate a deactivated rule", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table7.AddRow(new string[] {
                        "Rule1623",
                        "False",
                        "An Standard deviation rule 1623",
                        "3",
                        "5"});
#line 34
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table7, "And ");
#line 37
 testRunner.And("the \"Rule1623\" is deactivated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.When("user reactivates the rule \"Rule1623\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the rule \"Rule1623\" is activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void AssignTests()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign tests", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table8.AddRow(new string[] {
                        "2238",
                        "true",
                        "comment",
                        "3",
                        "1"});
#line 43
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table8, "And ");
#line 46
 testRunner.And("an existing ApplicationTest with test code \"22393\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("the ApplicationTest \"22393\" is assigned to the qc rule \"2238\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the ApplicationTest \"22393\" and the qc rule \"2238\" are linked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Unassign tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void UnassignTests()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unassign tests", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("a logged in user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table9.AddRow(new string[] {
                        "1731",
                        "false",
                        "comment 1731",
                        "1",
                        "2"});
#line 52
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table9, "And ");
#line 55
 testRunner.And("an existing ApplicationTest with test code \"16201\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("the ApplicationTest \"16201\" is assigned to the qc rule \"1731\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.When("the ApplicationTest \"16201\" is unassigned to the qc rule \"1731\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("the ApplicationTest \"16201\" and the qc rule \"1731\" are not linked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate QC results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QCRulesManagement")]
        public virtual void ValidateQCResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate QC results", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("an existing ApplicationTest with test code \"7260\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "StandardDeviation",
                        "TargetValue"});
            table10.AddRow(new string[] {
                        "0.5",
                        "0.9"});
#line 62
 testRunner.And("an existing control for the test \"7260\" with the values", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "WithinControl",
                        "Comment",
                        "NumberOfControls",
                        "StandardDeviationLimits"});
            table11.AddRow(new string[] {
                        "Rule 606",
                        "True",
                        "Comment 201",
                        "1",
                        "2"});
#line 65
 testRunner.And("a Standard Deviation rule existing in the system with the values", ((string)(null)), table11, "And ");
#line 68
 testRunner.And("the ApplicationTest \"7260\" is assigned to the qc rule \"Rule 606\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("a qc result with for the test \"7260\" with value 0.9 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the qc result is succesfully evaluated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
